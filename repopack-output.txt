================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-11-12T18:10:38.855Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
CustomNode.tsx
NodeLibrary.tsx
SaveLoadPanel.tsx
StrategyBuilder.tsx
TopNavBar.tsx

================================================================
Repository Files
================================================================

================
File: CustomNode.tsx
================
import React, { memo, useState } from 'react';
import { Handle, Position, NodeProps } from 'react-flow-renderer';
import { nodeTypes, indicatorOptions, conditionOptions, actionOptions, exitOptions } from '@/lib/nodeTypes';
import { Plus, Minus } from 'lucide-react';

const CustomNode = ({ data, isConnectable }: NodeProps) => {
  const { label, type } = data;
  const { icon: Icon, color, borderColor } = nodeTypes[type as keyof typeof nodeTypes];
  const [options, setOptions] = useState([0]);

  const addOption = () => {
    setOptions([...options, options.length]);
  };

  const removeOption = (index: number) => {
    setOptions(options.filter((_, i) => i !== index));
  };

  const renderNodeContent = (index: number) => {
    switch (type) {
      case 'asset':
        return (
          <input
            key={index}
            type='text'
            placeholder='Enter stock symbol'
            className='mt-2 p-1 w-full text-sm border rounded'
            onChange={(e) => console.log(`Asset symbol ${index}:`, e.target.value)}
          />
        );
      case 'indicator':
        return (
          <select
            key={index}
            className='mt-2 p-1 w-full text-sm border rounded'
            onChange={(e) => console.log(`Selected indicator ${index}:`, e.target.value)}
          >
            <option value=''>Select an indicator</option>
            {indicatorOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      case 'condition':
        return (
          <select
            key={index}
            className='mt-2 p-1 w-full text-sm border rounded'
            onChange={(e) => console.log(`Selected condition ${index}:`, e.target.value)}
          >
            <option value=''>Select a condition</option>
            {conditionOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      case 'action':
        return (
          <select
            key={index}
            className='mt-2 p-1 w-full text-sm border rounded'
            onChange={(e) => console.log(`Selected action ${index}:`, e.target.value)}
          >
            <option value=''>Select an action</option>
            {actionOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      case 'exit':
        return (
          <select
            key={index}
            className='mt-2 p-1 w-full text-sm border rounded'
            onChange={(e) => console.log(`Selected exit strategy ${index}:`, e.target.value)}
          >
            <option value=''>Select exit strategy</option>
            {exitOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      default:
        return null;
    }
  };

  return (
    <div className={`px-4 py-2 shadow-md rounded-md ${color} ${borderColor} border-2`}>
      <Handle
        type='target'
        position={Position.Top}
        isConnectable={isConnectable}
        className={`w-16 h-16 ${type === 'asset' ? 'hidden' : ''}`}
      />
      <div className='flex items-center justify-between mb-2'>
        <div className='flex items-center'>
          <Icon className='mr-2' size={24} />
          <div className='text-sm font-medium'>{label}</div>
        </div>
        <button
          onClick={addOption}
          className='p-1 bg-gray-200 dark:bg-gray-700 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors'
        >
          <Plus size={16} />
        </button>
      </div>
      {options.map((_, index) => (
        <div key={index} className='flex items-center mb-2'>
          {renderNodeContent(index)}
          {index > 0 && (
            <button
              onClick={() => removeOption(index)}
              className='ml-2 p-1 bg-gray-200 dark:bg-gray-700 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors'
            >
              <Minus size={16} />
            </button>
          )}
        </div>
      ))}
      {type !== 'exit' && (
        <Handle 
          type='source' 
          position={Position.Bottom} 
          isConnectable={isConnectable}
          className='w-16 h-16'
        />
      )}
    </div>
  );
};

export default memo(CustomNode);

================
File: NodeLibrary.tsx
================
import React from 'react';
import { nodeTypes } from '@/lib/nodeTypes';

interface NodeLibraryProps {
  isOpen: boolean;
}

const NodeLibrary: React.FC<NodeLibraryProps> = ({ isOpen }) => {
  const onDragStart = (event: React.DragEvent<HTMLDivElement>, nodeType: string) => {
    event.dataTransfer.setData('application/reactflow', nodeType);
    event.dataTransfer.effectAllowed = 'move';
  };

  return (
    <div className={`bg-white dark:bg-gray-800 p-4 overflow-y-auto transition-all duration-300 ${isOpen ? 'w-64' : 'w-0'}`}>
      {isOpen && (
        <>
          <h2 className='text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200'>Node Library</h2>
          {Object.entries(nodeTypes).map(([type, { label, icon: Icon, color }]) => (
            <div
              key={type}
              className={`flex items-center p-2 mb-2 rounded cursor-move hover:opacity-80 transition-colors ${color}`}
              onDragStart={(event) => onDragStart(event, type)}
              draggable
            >
              <Icon className='mr-2 text-gray-600 dark:text-gray-300' size={20} />
              <span className='text-gray-800 dark:text-gray-200'>{label}</span>
            </div>
          ))}
        </>
      )}
    </div>
  );
};

export default NodeLibrary;

================
File: SaveLoadPanel.tsx
================
'use client';

import React from 'react';
import { Node, Edge } from 'react-flow-renderer';
import { Save, Upload } from 'lucide-react';

interface SaveLoadPanelProps {
  nodes: Node[];
  edges: Edge[];
  setNodes: (nodes: Node[]) => void;
  setEdges: (edges: Edge[]) => void;
}

const SaveLoadPanel: React.FC<SaveLoadPanelProps> = ({ nodes, edges, setNodes, setEdges }) => {
  const saveStrategy = () => {
    const strategy = JSON.stringify({ nodes, edges });
    const blob = new Blob([strategy], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'strategy.json';
    link.click();
  };

  const loadStrategy = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        const { nodes: loadedNodes, edges: loadedEdges } = JSON.parse(content);
        setNodes(loadedNodes);
        setEdges(loadedEdges);
      };
      reader.readAsText(file);
    }
  };

  return (
    <div className='w-64 bg-white dark:bg-gray-800 p-4'>
      <h2 className='text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200'>Save/Load</h2>
      <button
        onClick={saveStrategy}
        className='flex items-center justify-center w-full mb-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors'
      >
        <Save className='mr-2' size={20} />
        Save Strategy
      </button>
      <label className='flex items-center justify-center w-full px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors cursor-pointer'>
        <Upload className='mr-2' size={20} />
        Load Strategy
        <input type='file' onChange={loadStrategy} className='hidden' accept='.json' />
      </label>
    </div>
  );
};

export default SaveLoadPanel;

================
File: StrategyBuilder.tsx
================
'use client';

import React, { useState, useCallback } from 'react';
import ReactFlow, {
  Edge,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
  Connection,
  ReactFlowProvider,
  ReactFlowInstance,
} from 'react-flow-renderer';
import NodeLibrary from './NodeLibrary';
import CustomNode from './CustomNode';
import TopNavBar from './TopNavBar';
import { generateNode } from '@/lib/nodeGenerator';
import { isValidConnection } from '@/lib/connectionRules';
import { useToast } from '@/components/ui/use-toast';

const customNodeTypes = {
  customNode: CustomNode,
};

const StrategyBuilder = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  const [isDrawerOpen, setIsDrawerOpen] = useState(true);
  const { toast } = useToast();

  const onConnect = useCallback(
    (params: Edge | Connection) => {
      if (isValidConnection(params as Connection, nodes)) {
        setEdges((eds) => addEdge(params, eds));
      } else {
        toast({
          title: 'Invalid Connection',
          description: 'This connection is not allowed based on the node types.',
          variant: 'destructive',
        });
      }
    },
    [setEdges, nodes, toast]
  );

  const onDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const onDrop = useCallback(
    (event: React.DragEvent<HTMLDivElement>) => {
      event.preventDefault();

      if (reactFlowInstance) {
        const type = event.dataTransfer.getData('application/reactflow');
        const position = {
          x: event.clientX,
          y: event.clientY - 40,
        };

        const newNode = generateNode(type, position);
        setNodes((nds) => nds.concat(newNode));
      }
    },
    [reactFlowInstance, setNodes]
  );

  const toggleDrawer = () => {
    setIsDrawerOpen(!isDrawerOpen);
  };

  return (
    <div className='flex flex-col h-screen'>
      <TopNavBar nodes={nodes} edges={edges} setNodes={setNodes} setEdges={setEdges} toggleDrawer={toggleDrawer} />
      <div className='flex flex-grow overflow-hidden'>
        <NodeLibrary isOpen={isDrawerOpen} />
        <ReactFlowProvider>
          <div className='flex-grow'>
            <ReactFlow
              nodes={nodes}
              edges={edges}
              onNodesChange={onNodesChange}
              onEdgesChange={onEdgesChange}
              onConnect={onConnect}
              onInit={(instance: ReactFlowInstance) => {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                setReactFlowInstance(instance as any);
              }}
              onDrop={onDrop}
              onDragOver={onDragOver}
              nodeTypes={customNodeTypes}
              fitView
            >
              <Background />
              <Controls />
            </ReactFlow>
          </div>
        </ReactFlowProvider>
      </div>
    </div>
  );
};

export default StrategyBuilder;

================
File: TopNavBar.tsx
================
'use client';

import React from 'react';
import { Node, Edge } from 'react-flow-renderer';
import { Save, Upload, Menu } from 'lucide-react';

interface TopNavBarProps {
  nodes: Node[];
  edges: Edge[];
  setNodes: (nodes: Node[]) => void;
  setEdges: (edges: Edge[]) => void;
  toggleDrawer: () => void;
}

const TopNavBar: React.FC<TopNavBarProps> = ({ nodes, edges, setNodes, setEdges, toggleDrawer }) => {
  const saveStrategy = () => {
    const strategy = JSON.stringify({ nodes, edges });
    const blob = new Blob([strategy], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'strategy.json';
    link.click();
  };

  const loadStrategy = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        const { nodes: loadedNodes, edges: loadedEdges } = JSON.parse(content);
        setNodes(loadedNodes);
        setEdges(loadedEdges);
      };
      reader.readAsText(file);
    }
  };

  return (
    <nav className='bg-white dark:bg-gray-800 shadow-md p-4'>
      <div className='flex items-center justify-between'>
        <div className='flex items-center'>
          <button
            onClick={toggleDrawer}
            className='mr-4 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100'
          >
            <Menu size={24} />
          </button>
          <h1 className='text-xl font-bold text-gray-800 dark:text-gray-200'>Algorithmic Strategy Builder</h1>
        </div>
        <div className='flex items-center space-x-4'>
          <button
            onClick={saveStrategy}
            className='flex items-center px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors'
          >
            <Save className='mr-2' size={20} />
            Save
          </button>
          <label className='flex items-center px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors cursor-pointer'>
            <Upload className='mr-2' size={20} />
            Load
            <input type='file' onChange={loadStrategy} className='hidden' accept='.json' />
          </label>
        </div>
      </div>
    </nav>
  );
};

export default TopNavBar;
